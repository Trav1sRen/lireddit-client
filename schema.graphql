type FieldError {
  field: String!
  message: String!
}

type Mutation {
  changePassword(newPassword: String!, uuid: String!): UserResponse!
  commentPost(postUuid: String!, text: String!): Boolean!
  createPost(input: PostInput!): Boolean!
  deletePost(postUuid: String!): Boolean!
  forgetPassword(email: String!): Boolean!
  login(password: String!, usernameOrEmail: String!): UserResponse!
  logout: Boolean!
  register(input: UsernamePasswordInput!): UserResponse!
  updatePost(postUuid: String!, text: String, title: String): Boolean!
  vote(postUuid: String!, value: Int!): Boolean!
  voteComment(postCommentUuid: String!): Boolean!
}

type PaginatedPosts {
  hasMore: Boolean!
  paginatedPosts: [Post!]!
}

type Post {
  commentUpdootStatus: Int!
  comments: Int!
  createdAt: String!
  downvotes: Int!
  postComments: [PostComment!]!
  postUuid: String!
  text: String!
  textSnippet: String!
  title: String!
  updatedAt: String!
  updootStatus: Int!
  upvotes: Int!
  user: User!
}

type PostComment {
  commentUpdootStatus: Int!
  createdAt: String!
  postCommentUuid: String!
  text: String!
  updatedAt: String!
  upvotes: Int!
  user: User!
}

input PostInput {
  text: String!
  title: String!
}

type Query {
  loginState: User
  post(postUuid: String!): Post!
  posts(cursor: String, limit: Int!): PaginatedPosts!
}

type User {
  createdAt: String!
  email: String!
  updatedAt: String!
  userUuid: String!
  username: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

input UsernamePasswordInput {
  email: String!
  password: String!
  username: String!
}