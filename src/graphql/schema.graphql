type CommentUpdoot {
  user: User!
}

type FieldError {
  field: String!
  message: String!
}

type Mutation {
  changePassword(newPassword: String!, uuid: String!): UserResponse!
  commentPost(postId: Int!, text: String!): PostComment
  createPost(input: PostInput!): Post!
  deletePost(id: Int!): Boolean!
  forgetPassword(email: String!): Boolean!
  login(password: String!, usernameOrEmail: String!): UserResponse!
  logout: Boolean!
  register(input: UsernamePasswordInput!): UserResponse!
  updatePost(id: Int!, title: String): Post
  vote(postId: Int!, value: Int!): VoteResponse
  voteComment(postCommentUuid: String!): PostComment
}

type PaginatedPosts {
  hasMore: Boolean!
  paginatedPosts: [Post!]!
}

type Post {
  comments: Int!
  createdAt: String!
  creator: User!
  downvotes: Int!
  id: Int!
  postComments: [PostComment!]!
  text: String!
  textSnippet: String!
  title: String!
  updatedAt: String!
  updoots: [Updoot!]!
  upvotes: Int!
}

type PostComment {
  commentUpdoots: [CommentUpdoot!]!
  createdAt: String!
  postCommentUuid: String!
  postId: Int!
  text: String!
  updatedAt: String!
  upvotes: Int!
  user: User!
}

input PostInput {
  text: String!
  title: String!
}

type Query {
  loginState: User
  post(id: Int!): Post
  posts(cursor: String, limit: Int!): PaginatedPosts!
}

type Updoot {
  user: User!
  vote: Int!
}

type User {
  createdAt: String!
  email: String!
  id: Int!
  updatedAt: String!
  username: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

input UsernamePasswordInput {
  email: String!
  password: String!
  username: String!
}

type VoteResponse {
  post: Post!
  vote: Int!
}