type FieldError {
  field: String!
  message: String!
}

type Mutation {
  changePassword(newPassword: String!, uuid: String!): UserResponse!
  createPost(input: PostInput!): Post!
  deletePost(id: Int!): Boolean!
  forgetPassword(email: String!): Boolean!
  login(password: String!, usernameOrEmail: String!): UserResponse!
  logout: Boolean!
  register(input: UsernamePasswordInput!): UserResponse!
  updatePost(id: Int!, title: String): Post
  vote(postId: Int!, value: Int!): Boolean!
}

type PaginatedPosts {
  hasMore: Boolean!
  paginatedPosts: [Post!]!
}

type Post {
  createdAt: String!
  creator: User!
  id: Int!
  points: Float!
  text: String!
  textSnippet: String!
  title: String!
  updatedAt: String!
}

input PostInput {
  text: String!
  title: String!
}

type Query {
  loginState: User
  post(id: Int!): Post
  posts(cursor: String, limit: Int!): PaginatedPosts!
}

type User {
  createdAt: String!
  email: String!
  id: Int!
  updatedAt: String!
  username: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

input UsernamePasswordInput {
  email: String!
  password: String!
  username: String!
}